
;; Function SetSchedulerRes (SetSchedulerRes)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 8 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r67,l0) best AREG, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a3 (r65,l0) best AREG, cover GENERAL_REGS
    r64: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a4 (r64,l0) best AREG, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a12 (r59,l0) best AREG, cover GENERAL_REGS
    r58: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a13 (r58,l0) best AREG, cover GENERAL_REGS

  a0(r67,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a2(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r65,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r64,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a8(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a9(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a10(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a11(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r59,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r58,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 69(l0): point = 0
   Insn 66(l0): point = 2
   Insn 62(l0): point = 4
   Insn 61(l0): point = 6
   Insn 58(l0): point = 9
   Insn 57(l0): point = 11
   Insn 56(l0): point = 13
   Insn 55(l0): point = 15
   Insn 74(l0): point = 18
   Insn 50(l0): point = 20
   Insn 49(l0): point = 22
   Insn 48(l0): point = 24
   Insn 47(l0): point = 26
   Insn 46(l0): point = 28
   Insn 45(l0): point = 30
   Insn 43(l0): point = 33
   Insn 42(l0): point = 35
   Insn 41(l0): point = 37
   Insn 40(l0): point = 39
   Insn 39(l0): point = 41
   Insn 38(l0): point = 43
   Insn 37(l0): point = 45
   Insn 36(l0): point = 47
   Insn 35(l0): point = 49
   Insn 34(l0): point = 51
   Insn 33(l0): point = 53
   Insn 32(l0): point = 55
   Insn 31(l0): point = 57
   Insn 30(l0): point = 59
   Insn 29(l0): point = 61
   Insn 28(l0): point = 63
   Insn 27(l0): point = 65
   Insn 26(l0): point = 67
   Insn 25(l0): point = 69
   Insn 72(l0): point = 72
   Insn 20(l0): point = 74
   Insn 19(l0): point = 76
   Insn 18(l0): point = 78
   Insn 17(l0): point = 80
   Insn 16(l0): point = 82
   Insn 15(l0): point = 84
   Insn 13(l0): point = 87
   Insn 12(l0): point = 89
   Insn 11(l0): point = 91
   Insn 10(l0): point = 93
   Insn 9(l0): point = 95
   Insn 8(l0): point = 97
   Insn 7(l0): point = 99
   Insn 6(l0): point = 101
   Insn 5(l0): point = 103
 a0(r67): [3..4]
 a1(r66): [5..6]
 a2(r72): [14..15]
 a3(r65): [27..28]
 a4(r64): [36..37]
 a5(r71): [44..45]
 a6(r70): [48..49]
 a7(r63): [50..53]
 a8(r61): [50..61]
 a9(r69): [54..57]
 a10(r62): [54..59]
 a11(r60): [68..69]
 a12(r59): [81..82]
 a13(r58): [90..91]
 a14(r68): [98..99]
Compressing live ranges: from 106 to 28 - 26%
Ranges after the compression:
 a0(r67): [0..1]
 a1(r66): [2..3]
 a2(r72): [4..5]
 a3(r65): [6..7]
 a4(r64): [8..9]
 a5(r71): [10..11]
 a6(r70): [12..13]
 a7(r63): [14..15]
 a8(r61): [14..19]
 a9(r69): [16..17]
 a10(r62): [16..18]
 a11(r60): [20..21]
 a12(r59): [22..23]
 a13(r58): [24..25]
 a14(r68): [26..27]
  regions=1, blocks=8, points=28
    allocnos=15, copies=0, conflicts=0, ranges=15
Disposition:
   13:r58  l0     0   12:r59  l0     0   11:r60  l0     0    8:r61  l0     1
   10:r62  l0     2    7:r63  l0     0    4:r64  l0     0    3:r65  l0     0
    1:r66  l0     0    0:r67  l0     0   14:r68  l0     0    9:r69  l0     0
    6:r70  l0     0    5:r71  l0     0    2:r72  l0     0
+++Costs: overall -5, reg -5, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 68
insn=8, live_throughout: 7, dead_or_set: 68
insn=9, live_throughout: , dead_or_set: 0
insn=10, live_throughout: 0, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 0, 58
insn=12, live_throughout: 7, dead_or_set: 58
insn=13, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 0
insn=16, live_throughout: 7, dead_or_set: 0, 59
insn=17, live_throughout: 7, dead_or_set: 59
insn=18, live_throughout: 7, dead_or_set: 
insn=19, live_throughout: 7, dead_or_set: 0
insn=20, live_throughout: 7, dead_or_set: 
insn=72, live_throughout: 7, dead_or_set: 
insn=23, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 60
insn=26, live_throughout: 7, dead_or_set: 60
insn=27, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 0
insn=29, live_throughout: 7, dead_or_set: 61
insn=30, live_throughout: 7, 61, dead_or_set: 62
insn=31, live_throughout: 7, 61, 62, dead_or_set: 69
insn=32, live_throughout: 7, 61, 62, 69, dead_or_set: 
insn=33, live_throughout: 7, 61, dead_or_set: 62, 63, 69
insn=34, live_throughout: 7, 61, 63, dead_or_set: 
insn=35, live_throughout: 7, dead_or_set: 61, 63, 70
insn=36, live_throughout: 7, dead_or_set: 70
insn=37, live_throughout: 7, dead_or_set: 71
insn=38, live_throughout: 7, dead_or_set: 71
insn=39, live_throughout: , dead_or_set: 0
insn=40, live_throughout: 0, dead_or_set: 
insn=41, live_throughout: 7, dead_or_set: 0, 64
insn=42, live_throughout: 7, dead_or_set: 64
insn=43, live_throughout: 7, dead_or_set: 
insn=45, live_throughout: 7, dead_or_set: 0
insn=46, live_throughout: 7, dead_or_set: 0, 65
insn=47, live_throughout: 7, dead_or_set: 65
insn=48, live_throughout: 7, dead_or_set: 
insn=49, live_throughout: 7, dead_or_set: 0
insn=50, live_throughout: 7, dead_or_set: 
insn=74, live_throughout: 7, dead_or_set: 
insn=53, live_throughout: 7, dead_or_set: 
insn=55, live_throughout: 7, dead_or_set: 72
insn=56, live_throughout: 7, dead_or_set: 72
insn=57, live_throughout: 7, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 0
insn=59, live_throughout: 7, dead_or_set: 
insn=61, live_throughout: 7, dead_or_set: 66
insn=62, live_throughout: 7, dead_or_set: 66, 67
insn=66, live_throughout: 7, dead_or_set: 0, 67
insn=69, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 25
changing reg in insn 26
changing reg in insn 29
changing reg in insn 35
changing reg in insn 34
changing reg in insn 30
changing reg in insn 33
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 34
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 66
changing reg in insn 7
changing reg in insn 8
changing reg in insn 31
changing reg in insn 33
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 55
changing reg in insn 56
deleting insn with uid = 11.
deleting insn with uid = 16.
deleting insn with uid = 41.
deleting insn with uid = 46.
deleting insn with uid = 62.
deleting insn with uid = 66.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 58.


SetSchedulerRes

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={17d,15u} r1={10d,2u} r2={10d,2u} r6={1d,19u} r7={5d,34u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={15d,4u} r18={8d} r19={8d} r20={1d,1u,1e} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} 
;;    total ref usage 473{395d,77u,1e} in 44{36 regular + 8 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 58 68

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 win32_timer.c:34 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(insn 6 5 7 2 win32_timer.c:38 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 8 [0x8])) 44 {*movsi_1} (nil))

(insn 7 6 8 2 win32_timer.c:38 (parallel [
            (set (reg:SI 0 ax [68])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(insn 8 7 9 2 win32_timer.c:38 (set (mem/f/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [68])) 44 {*movsi_1} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -16 [0xfffffff0]))
        (nil)))

(call_insn 9 8 10 2 win32_timer.c:38 (parallel [
            (set (reg:SI 0 ax)
                (call (mem:QI (symbol_ref:SI ("timeGetDevCaps@8") [flags 0x43]  <function_decl 0x7f88b680 timeGetDevCaps>) [0 S1 A8])
                    (const_int 8 [0x8])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
        ]) 693 {*call_value_pop_0} (nil)
    (nil))

(insn 10 9 12 2 win32_timer.c:38 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(insn 12 10 13 2 win32_timer.c:38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:58 D.35096 ] [58])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 13 12 14 2 win32_timer.c:38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 23)
            (pc))) 464 {*jcc_1} (nil)
 -> 23)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59

;; Pred edge  2 (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn 15 14 17 3 win32_timer.c:39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("GetLastError@0") [flags 0x43]  <function_decl 0x7fbe6080 GetLastError>) [0 S1 A8])
            (const_int 0 [0x0]))) 696 {*call_value_0} (nil)
    (nil))

(insn 17 15 18 3 win32_timer.c:39 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [orig:59 D.35099 ] [59])) 44 {*movsi_1} (nil))

(insn 18 17 19 3 win32_timer.c:39 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*LC0") [flags 0x2]  <string_cst 0x7f48e7f0>)) 44 {*movsi_1} (nil))

(call_insn 19 18 20 3 win32_timer.c:39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 0x7fdf5f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 696 {*call_value_0} (nil)
    (nil))

(insn 20 19 72 3 win32_timer.c:40 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])
        (const_int -1 [0xffffffff])) 44 {*movsi_1} (nil))

(jump_insn 72 20 73 3 (set (pc)
        (label_ref 59)) 477 {jump} (nil)
 -> 59)
;; End of basic block 3 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 [100.0%] 

(barrier 73 72 23)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 60 61 62 63 64 69 70 71

;; Pred edge  2
(code_label 23 73 24 4 2 "" [1 uses])

(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 4 win32_timer.c:43 (set (reg:SI 0 ax [orig:60 D.35101 ] [60])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffe8])) [0 tc.wPeriodMin+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 26 25 27 4 win32_timer.c:43 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [orig:60 D.35101 ] [60])) 44 {*movsi_1} (nil))

(insn 27 26 28 4 win32_timer.c:43 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*LC1") [flags 0x2]  <string_cst 0x7fda1378>)) 44 {*movsi_1} (nil))

(call_insn 28 27 29 4 win32_timer.c:43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 0x7fdf5f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 696 {*call_value_0} (nil)
    (nil))

(insn 29 28 30 4 win32_timer.c:44 (set (reg:SI 1 dx [orig:61 D.35102 ] [61])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffec])) [0 tc.wPeriodMax+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 30 29 31 4 win32_timer.c:44 (set (reg:SI 2 cx [orig:62 D.35103 ] [62])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffe8])) [0 tc.wPeriodMin+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 31 30 32 4 win32_timer.c:44 (set (reg:SI 0 ax [69])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 period_ms+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 32 31 33 4 win32_timer.c:44 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 2 cx [orig:62 D.35103 ] [62])
            (reg:SI 0 ax [69]))) 6 {*cmpsi_1} (nil))

(insn 33 32 34 4 win32_timer.c:44 (set (reg:SI 0 ax [orig:63 D.35104 ] [63])
        (if_then_else:SI (geu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (reg:SI 2 cx [orig:62 D.35103 ] [62])
            (reg:SI 0 ax [69]))) 668 {*movsicc_noc} (nil))

(insn 34 33 35 4 win32_timer.c:44 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:61 D.35102 ] [61])
            (reg:SI 0 ax [orig:63 D.35104 ] [63]))) 6 {*cmpsi_1} (nil))

(insn 35 34 36 4 win32_timer.c:44 (set (reg:SI 0 ax [70])
        (if_then_else:SI (leu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (reg:SI 1 dx [orig:61 D.35102 ] [61])
            (reg:SI 0 ax [orig:63 D.35104 ] [63]))) 668 {*movsicc_noc} (nil))

(insn 36 35 37 4 win32_timer.c:44 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffff0])) [0 timerRes+0 S4 A32])
        (reg:SI 0 ax [70])) 44 {*movsi_1} (nil))

(insn 37 36 38 4 win32_timer.c:45 (set (reg:SI 0 ax [71])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffff0])) [0 timerRes+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 38 37 39 4 win32_timer.c:45 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [71])) 44 {*movsi_1} (nil))

(call_insn 39 38 40 4 win32_timer.c:45 (parallel [
            (set (reg:SI 0 ax)
                (call (mem:QI (symbol_ref:SI ("timeBeginPeriod@4") [flags 0x43]  <function_decl 0x7f88b700 timeBeginPeriod>) [0 S1 A8])
                    (const_int 4 [0x4])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) 693 {*call_value_pop_0} (nil)
    (nil))

(insn 40 39 42 4 win32_timer.c:45 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(insn 42 40 43 4 win32_timer.c:45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:64 D.35105 ] [64])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 43 42 44 4 win32_timer.c:45 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 464 {*jcc_1} (nil)
 -> 53)
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  6

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 65

;; Pred edge  4 (fallthru)
(note 44 43 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 45 44 47 5 win32_timer.c:46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("GetLastError@0") [flags 0x43]  <function_decl 0x7fbe6080 GetLastError>) [0 S1 A8])
            (const_int 0 [0x0]))) 696 {*call_value_0} (nil)
    (nil))

(insn 47 45 48 5 win32_timer.c:46 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [orig:65 D.35108 ] [65])) 44 {*movsi_1} (nil))

(insn 48 47 49 5 win32_timer.c:46 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*LC2") [flags 0x2]  <string_cst 0x7f48e910>)) 44 {*movsi_1} (nil))

(call_insn 49 48 50 5 win32_timer.c:46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 0x7fdf5f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 696 {*call_value_0} (nil)
    (nil))

(insn 50 49 74 5 win32_timer.c:47 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])
        (const_int -1 [0xffffffff])) 44 {*movsi_1} (nil))

(jump_insn 74 50 75 5 (set (pc)
        (label_ref 59)) 477 {jump} (nil)
 -> 59)
;; End of basic block 5 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 [100.0%] 

(barrier 75 74 53)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 72

;; Pred edge  4
(code_label 53 75 54 6 4 "" [1 uses])

(note 54 53 55 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 6 win32_timer.c:50 (set (reg:SI 0 ax [72])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffff0])) [0 timerRes+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 56 55 57 6 win32_timer.c:50 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [72])) 44 {*movsi_1} (nil))

(insn 57 56 58 6 win32_timer.c:50 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*LC3") [flags 0x2]  <string_cst 0x7fda13b0>)) 44 {*movsi_1} (nil))

(call_insn 58 57 59 6 win32_timer.c:50 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 0x7fdf5f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 696 {*call_value_0} (nil)
    (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 3 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 66 67

;; Pred edge  6 (fallthru)
;; Pred edge  3 [100.0%] 
;; Pred edge  5 [100.0%] 
(code_label 59 58 60 7 3 "" [2 uses])

(note 60 59 61 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 69 7 win32_timer.c:54 (set (reg:SI 0 ax [orig:66 D.35110 ] [66])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 69 61 76 7 win32_timer.c:55 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 76 69 0 NOTE_INSN_DELETED)


;; Function ResetSchedulerRes (ResetSchedulerRes)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r61,l0) best AREG, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r59,l0) best AREG, cover GENERAL_REGS
    r58: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a3 (r58,l0) best AREG, cover GENERAL_REGS

  a0(r61,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a2(r59,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r58,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 36(l0): point = 0
   Insn 33(l0): point = 2
   Insn 29(l0): point = 4
   Insn 28(l0): point = 6
   Insn 25(l0): point = 9
   Insn 24(l0): point = 11
   Insn 39(l0): point = 14
   Insn 19(l0): point = 16
   Insn 18(l0): point = 18
   Insn 17(l0): point = 20
   Insn 16(l0): point = 22
   Insn 15(l0): point = 24
   Insn 14(l0): point = 26
   Insn 12(l0): point = 29
   Insn 11(l0): point = 31
   Insn 10(l0): point = 33
   Insn 9(l0): point = 35
   Insn 8(l0): point = 37
   Insn 7(l0): point = 39
   Insn 6(l0): point = 41
   Insn 5(l0): point = 43
 a0(r61): [3..4]
 a1(r60): [5..6]
 a2(r59): [23..24]
 a3(r58): [32..33]
 a4(r62): [40..41]
Compressing live ranges: from 46 to 10 - 21%
Ranges after the compression:
 a0(r61): [0..1]
 a1(r60): [2..3]
 a2(r59): [4..5]
 a3(r58): [6..7]
 a4(r62): [8..9]
  regions=1, blocks=6, points=10
    allocnos=5, copies=0, conflicts=0, ranges=5
Disposition:
    3:r58  l0     0    2:r59  l0     0    1:r60  l0     0    0:r61  l0     0
    4:r62  l0     0
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 62
insn=7, live_throughout: 7, dead_or_set: 62
insn=8, live_throughout: , dead_or_set: 0
insn=9, live_throughout: 0, dead_or_set: 
insn=10, live_throughout: 7, dead_or_set: 0, 58
insn=11, live_throughout: 7, dead_or_set: 58
insn=12, live_throughout: 7, dead_or_set: 
insn=14, live_throughout: 7, dead_or_set: 0
insn=15, live_throughout: 7, dead_or_set: 0, 59
insn=16, live_throughout: 7, dead_or_set: 59
insn=17, live_throughout: 7, dead_or_set: 
insn=18, live_throughout: 7, dead_or_set: 0
insn=19, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 
insn=22, live_throughout: 7, dead_or_set: 
insn=24, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 0
insn=26, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 60
insn=29, live_throughout: 7, dead_or_set: 60, 61
insn=33, live_throughout: 7, dead_or_set: 0, 61
insn=36, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 33
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
deleting insn with uid = 15.
deleting insn with uid = 29.
deleting insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 25.


ResetSchedulerRes

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={7d,5u} r1={5d} r2={5d} r6={1d,9u} r7={3d,17u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={6d,1u} r18={4d} r19={4d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 229{196d,33u,0e} in 17{13 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 58 62

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 win32_timer.c:58 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(insn 6 5 7 2 win32_timer.c:60 (set (reg:SI 0 ax [62])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 period_ms+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 7 6 8 2 win32_timer.c:60 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [62])) 44 {*movsi_1} (nil))

(call_insn 8 7 9 2 win32_timer.c:60 (parallel [
            (set (reg:SI 0 ax)
                (call (mem:QI (symbol_ref:SI ("timeEndPeriod@4") [flags 0x43]  <function_decl 0x7f88b780 timeEndPeriod>) [0 S1 A8])
                    (const_int 4 [0x4])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) 693 {*call_value_pop_0} (nil)
    (nil))

(insn 9 8 11 2 win32_timer.c:60 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(insn 11 9 12 2 win32_timer.c:60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:58 D.35089 ] [58])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 12 11 13 2 win32_timer.c:60 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 464 {*jcc_1} (nil)
 -> 22)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59

;; Pred edge  2 (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn 14 13 16 3 win32_timer.c:61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("GetLastError@0") [flags 0x43]  <function_decl 0x7fbe6080 GetLastError>) [0 S1 A8])
            (const_int 0 [0x0]))) 696 {*call_value_0} (nil)
    (nil))

(insn 16 14 17 3 win32_timer.c:61 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [orig:59 D.35092 ] [59])) 44 {*movsi_1} (nil))

(insn 17 16 18 3 win32_timer.c:61 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*LC4") [flags 0x2]  <string_cst 0x7fec5580>)) 44 {*movsi_1} (nil))

(call_insn 18 17 19 3 win32_timer.c:61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 0x7fdf5f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 696 {*call_value_0} (nil)
    (nil))

(insn 19 18 39 3 win32_timer.c:62 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])
        (const_int -1 [0xffffffff])) 44 {*movsi_1} (nil))

(jump_insn 39 19 40 3 (set (pc)
        (label_ref 26)) 477 {jump} (nil)
 -> 26)
;; End of basic block 3 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 [100.0%] 

(barrier 40 39 22)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []

;; Pred edge  2
(code_label 22 40 23 4 6 "" [1 uses])

(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 25 4 win32_timer.c:65 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*LC5") [flags 0x2]  <string_cst 0x7f48eac0>)) 44 {*movsi_1} (nil))

(call_insn 25 24 26 4 win32_timer.c:65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 0x7fdf6280 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) 696 {*call_value_0} (nil)
    (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 60 61

;; Pred edge  4 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 26 25 27 5 7 "" [1 uses])

(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 36 5 win32_timer.c:68 (set (reg:SI 0 ax [orig:60 D.35094 ] [60])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 36 28 41 5 win32_timer.c:69 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 41 36 0 NOTE_INSN_DELETED)


;; Function installTimerFunc (installTimerFunc)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r65,l0) best AREG, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a3 (r62,l0) best AREG, cover GENERAL_REGS
    r61: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a4 (r61,l0) best AREG, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a8 (r59,l0) best AREG, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r65,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a2(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r62,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r61,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r59,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 52(l0): point = 0
   Insn 49(l0): point = 2
   Insn 45(l0): point = 4
   Insn 44(l0): point = 6
   Insn 41(l0): point = 9
   Insn 40(l0): point = 11
   Insn 39(l0): point = 13
   Insn 38(l0): point = 15
   Insn 37(l0): point = 17
   Insn 36(l0): point = 19
   Insn 35(l0): point = 21
   Insn 55(l0): point = 24
   Insn 30(l0): point = 26
   Insn 29(l0): point = 28
   Insn 28(l0): point = 30
   Insn 27(l0): point = 32
   Insn 26(l0): point = 34
   Insn 25(l0): point = 36
   Insn 23(l0): point = 39
   Insn 22(l0): point = 41
   Insn 21(l0): point = 43
   Insn 20(l0): point = 45
   Insn 19(l0): point = 47
   Insn 18(l0): point = 49
   Insn 17(l0): point = 51
   Insn 16(l0): point = 53
   Insn 15(l0): point = 55
   Insn 14(l0): point = 57
   Insn 13(l0): point = 59
   Insn 12(l0): point = 61
   Insn 11(l0): point = 63
   Insn 10(l0): point = 65
   Insn 9(l0): point = 67
   Insn 8(l0): point = 69
   Insn 7(l0): point = 71
   Insn 6(l0): point = 73
   Insn 5(l0): point = 75
 a0(r65): [3..4]
 a1(r64): [5..6]
 a2(r63): [12..13]
 a3(r62): [14..15]
 a4(r61): [33..34]
 a5(r60): [42..43]
 a6(r70): [44..45]
 a7(r69): [48..49]
 a8(r59): [48..51]
 a9(r68): [58..59]
 a10(r67): [62..63]
 a11(r58): [66..73]
 a12(r66): [68..69]
Compressing live ranges: from 78 to 25 - 32%
Ranges after the compression:
 a0(r65): [0..1]
 a1(r64): [2..3]
 a2(r63): [4..5]
 a3(r62): [6..7]
 a4(r61): [8..9]
 a5(r60): [10..11]
 a6(r70): [12..13]
 a7(r69): [14..15]
 a8(r59): [14..16]
 a9(r68): [17..18]
 a10(r67): [19..20]
 a11(r58): [21..24]
 a12(r66): [22..23]
  regions=1, blocks=6, points=25
    allocnos=13, copies=0, conflicts=0, ranges=13
Disposition:
   11:r58  l0     0    8:r59  l0     0    5:r60  l0     0    4:r61  l0     0
    3:r62  l0     0    2:r63  l0     0    1:r64  l0     0    0:r65  l0     0
   12:r66  l0     1   10:r67  l0     0    9:r68  l0     0    7:r69  l0     1
    6:r70  l0     0
+++Costs: overall -4, reg -4, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, 58, dead_or_set: 
insn=8, live_throughout: 7, 58, dead_or_set: 66
insn=9, live_throughout: 7, 58, dead_or_set: 66
insn=10, live_throughout: 7, dead_or_set: 58
insn=11, live_throughout: 7, dead_or_set: 67
insn=12, live_throughout: 7, dead_or_set: 67
insn=13, live_throughout: 7, dead_or_set: 68
insn=14, live_throughout: 7, dead_or_set: 68
insn=15, live_throughout: , dead_or_set: 0
insn=16, live_throughout: 0, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 0, 59
insn=18, live_throughout: 7, 59, dead_or_set: 69
insn=19, live_throughout: 7, dead_or_set: 59, 69
insn=20, live_throughout: 7, dead_or_set: 70
insn=21, live_throughout: 7, dead_or_set: 60, 70
insn=22, live_throughout: 7, dead_or_set: 60
insn=23, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 0
insn=26, live_throughout: 7, dead_or_set: 0, 61
insn=27, live_throughout: 7, dead_or_set: 61
insn=28, live_throughout: 7, dead_or_set: 
insn=29, live_throughout: 7, dead_or_set: 0
insn=30, live_throughout: 7, dead_or_set: 
insn=55, live_throughout: 7, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 
insn=35, live_throughout: 7, dead_or_set: 
insn=36, live_throughout: 7, dead_or_set: 0
insn=37, live_throughout: 7, dead_or_set: 0
insn=38, live_throughout: 7, dead_or_set: 0, 62
insn=39, live_throughout: 7, dead_or_set: 62, 63
insn=40, live_throughout: 7, dead_or_set: 63
insn=41, live_throughout: 7, dead_or_set: 0
insn=42, live_throughout: 7, dead_or_set: 
insn=44, live_throughout: 7, dead_or_set: 64
insn=45, live_throughout: 7, dead_or_set: 64, 65
insn=49, live_throughout: 7, dead_or_set: 0, 65
insn=52, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 6
changing reg in insn 10
changing reg in insn 17
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 27
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 49
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 17.
deleting insn with uid = 26.
deleting insn with uid = 38.
deleting insn with uid = 45.
deleting insn with uid = 49.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 41.


installTimerFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={14d,11u} r1={9d,2u} r2={7d} r6={1d,14u} r7={3d,24u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={8d,1u} r18={6d} r19={6d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 348{295d,53u,0e} in 32{26 regular + 6 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 58 59 60 66 67 68 69 70

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 win32_timer.c:72 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(insn 6 5 7 2 win32_timer.c:74 (set (reg/f:SI 0 ax [orig:58 cb.6 ] [58])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 cb+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 7 6 8 2 win32_timer.c:74 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (const_int 1 [0x1])) 44 {*movsi_1} (nil))

(insn 8 7 9 2 win32_timer.c:74 (set (reg:SI 1 dx [66])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 arg+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 9 8 10 2 win32_timer.c:74 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 1 dx [66])) 44 {*movsi_1} (nil))

(insn 10 9 11 2 win32_timer.c:74 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:58 cb.6 ] [58])) 44 {*movsi_1} (nil))

(insn 11 10 12 2 win32_timer.c:74 (set (reg:SI 0 ax [67])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 period_ms+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 12 11 13 2 win32_timer.c:74 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [67])) 44 {*movsi_1} (nil))

(insn 13 12 14 2 win32_timer.c:74 (set (reg:SI 0 ax [68])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 period_ms+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 14 13 15 2 win32_timer.c:74 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [68])) 44 {*movsi_1} (nil))

(call_insn 15 14 16 2 win32_timer.c:74 (parallel [
            (set (reg:SI 0 ax)
                (call (mem:QI (symbol_ref:SI ("timeSetEvent@20") [flags 0x43]  <function_decl 0x7f88b580 timeSetEvent>) [0 S1 A8])
                    (const_int 20 [0x14])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])))
        ]) 693 {*call_value_pop_0} (nil)
    (nil))

(insn 16 15 18 2 win32_timer.c:74 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -20 [0xffffffec])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(insn 18 16 19 2 win32_timer.c:74 (set (reg/f:SI 1 dx [69])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 timer_id+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 19 18 20 2 win32_timer.c:74 (set (mem:SI (reg/f:SI 1 dx [69]) [0 S4 A32])
        (reg:SI 0 ax [orig:59 D.35079 ] [59])) 44 {*movsi_1} (nil))

(insn 20 19 21 2 win32_timer.c:74 (set (reg/f:SI 0 ax [70])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 timer_id+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 21 20 22 2 win32_timer.c:74 (set (reg:SI 0 ax [orig:60 D.35080 ] [60])
        (mem:SI (reg/f:SI 0 ax [70]) [0 S4 A32])) 44 {*movsi_1} (nil))

(insn 22 21 23 2 win32_timer.c:74 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:60 D.35080 ] [60])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 23 22 24 2 win32_timer.c:74 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 464 {*jcc_1} (nil)
 -> 33)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 61

;; Pred edge  2 (fallthru)
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn 25 24 27 3 win32_timer.c:78 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("GetLastError@0") [flags 0x43]  <function_decl 0x7fbe6080 GetLastError>) [0 S1 A8])
            (const_int 0 [0x0]))) 696 {*call_value_0} (nil)
    (nil))

(insn 27 25 28 3 win32_timer.c:78 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [orig:61 D.35083 ] [61])) 44 {*movsi_1} (nil))

(insn 28 27 29 3 win32_timer.c:78 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*LC6") [flags 0x2]  <string_cst 0x7ff68fb8>)) 44 {*movsi_1} (nil))

(call_insn 29 28 30 3 win32_timer.c:78 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 0x7fdf5f00 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) 696 {*call_value_0} (nil)
    (nil))

(insn 30 29 55 3 win32_timer.c:79 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])
        (const_int -1 [0xffffffff])) 44 {*movsi_1} (nil))

(jump_insn 55 30 56 3 (set (pc)
        (label_ref 42)) 477 {jump} (nil)
 -> 42)
;; End of basic block 3 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 [100.0%] 

(barrier 56 55 33)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 62 63

;; Pred edge  2
(code_label 33 56 34 4 9 "" [1 uses])

(note 34 33 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 35 34 36 4 win32_timer.c:82 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*LC7") [flags 0x2]  <string_cst 0x7f48ec70>)) 44 {*movsi_1} (nil))

(call_insn 36 35 37 4 win32_timer.c:82 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 0x7fdf6280 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) 696 {*call_value_0} (nil)
    (nil))

(call_insn 37 36 39 4 win32_timer.c:82 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("__getreent") [flags 0x43]  <function_decl 0x7fe05480 __getreent>) [0 S1 A8])
            (const_int 0 [0x0]))) 696 {*call_value_0} (nil)
    (nil))

(insn 39 37 40 4 win32_timer.c:82 (set (reg/f:SI 0 ax [orig:63 D.35086 ] [63])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [orig:62 D.35085 ] [62])
                (const_int 8 [0x8])) [0 D.35085_12->_stdout+0 S4 A64])) 44 {*movsi_1} (nil))

(insn 40 39 41 4 win32_timer.c:82 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:63 D.35086 ] [63])) 44 {*movsi_1} (nil))

(call_insn 41 40 42 4 win32_timer.c:82 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fflush") [flags 0x43]  <function_decl 0x7fe05c80 fflush>) [0 S1 A8])
            (const_int 4 [0x4]))) 696 {*call_value_0} (nil)
    (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 64 65

;; Pred edge  4 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 42 41 43 5 10 "" [1 uses])

(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 52 5 win32_timer.c:85 (set (reg:SI 0 ax [orig:64 D.35087 ] [64])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffff4])) [0 retVal+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 52 44 57 5 win32_timer.c:86 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 57 52 0 NOTE_INSN_DELETED)


;; Function uninstallTimerFunc (uninstallTimerFunc)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r60,l0) best AREG, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r58,l0) best AREG, cover GENERAL_REGS

  a0(r60,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a2(r58,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a3(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 18(l0): point = 0
   Insn 15(l0): point = 2
   Insn 11(l0): point = 4
   Insn 10(l0): point = 6
   Insn 9(l0): point = 8
   Insn 8(l0): point = 10
   Insn 7(l0): point = 12
   Insn 6(l0): point = 14
   Insn 5(l0): point = 16
 a0(r60): [3..4]
 a1(r59): [5..6]
 a2(r58): [7..8]
 a3(r61): [15..16]
Compressing live ranges: from 19 to 8 - 42%
Ranges after the compression:
 a0(r60): [0..1]
 a1(r59): [2..3]
 a2(r58): [4..5]
 a3(r61): [6..7]
  regions=1, blocks=3, points=8
    allocnos=4, copies=0, conflicts=0, ranges=4
Disposition:
    2:r58  l0     0    1:r59  l0     0    0:r60  l0     0    3:r61  l0     0
+++Costs: overall -2, reg -2, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 61
insn=6, live_throughout: 7, dead_or_set: 61
insn=7, live_throughout: , dead_or_set: 0
insn=8, live_throughout: 0, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 0, 58
insn=10, live_throughout: 7, dead_or_set: 58, 59
insn=11, live_throughout: 7, dead_or_set: 59, 60
insn=15, live_throughout: 7, dead_or_set: 0, 60
insn=18, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 15
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 9.
deleting insn with uid = 10.
deleting insn with uid = 11.
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.


uninstallTimerFunc

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r6={1d,3u} r7={3d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d} r18={1d} r19={1d} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 71{56d,15u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 58 59 60 61

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 win32_timer.c:89 (set (reg:SI 0 ax [61])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 timer_id+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 6 5 7 2 win32_timer.c:89 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [61])) 44 {*movsi_1} (nil))

(call_insn 7 6 8 2 win32_timer.c:89 (parallel [
            (set (reg:SI 0 ax)
                (call (mem:QI (symbol_ref:SI ("timeKillEvent@4") [flags 0x43]  <function_decl 0x7f88b600 timeKillEvent>) [0 S1 A8])
                    (const_int 4 [0x4])))
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
        ]) 693 {*call_value_pop_0} (nil)
    (nil))

(insn 8 7 18 2 win32_timer.c:89 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(insn 18 8 21 2 win32_timer.c:90 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 21 18 0 NOTE_INSN_DELETED)


;; Function testCallback (testCallback)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 9 count 8 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a2(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a3(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:11

   Insn 23(l0): point = 1
   Insn 21(l0): point = 4
   Insn 20(l0): point = 6
   Insn 19(l0): point = 8
   Insn 18(l0): point = 10
   Insn 17(l0): point = 12
   Insn 16(l0): point = 14
   Insn 13(l0): point = 17
   Insn 28(l0): point = 20
   Insn 8(l0): point = 22
   Insn 6(l0): point = 25
   Insn 5(l0): point = 27
 a0(r61): [7..8]
 a1(r60): [11..12]
 a2(r59): [13..14]
 a3(r58): [20..22] [13..17]
Compressing live ranges: from 30 to 9 - 30%
Ranges after the compression:
 a0(r61): [0..1]
 a1(r60): [2..3]
 a2(r59): [4..5]
 a3(r58): [7..8] [4..6]
  regions=1, blocks=8, points=9
    allocnos=4, copies=0, conflicts=0, ranges=5
Disposition:
    3:r58  l0     0    2:r59  l0     1    1:r60  l0     0    0:r61  l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 58
insn=28, live_throughout: 7, 58, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 58
insn=14, live_throughout: 7, 58, dead_or_set: 
insn=16, live_throughout: 7, 58, dead_or_set: 59
insn=17, live_throughout: 7, dead_or_set: 58, 59, 60
insn=18, live_throughout: 7, dead_or_set: 60
insn=19, live_throughout: 7, dead_or_set: 61
insn=20, live_throughout: 7, dead_or_set: 61
insn=21, live_throughout: 7, dead_or_set: 
insn=23, live_throughout: 7, dead_or_set: 
insn=26, live_throughout: 7, dead_or_set: 
changing reg in insn 13
changing reg in insn 8
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
starting the processing of deferred insns
ending the processing of deferred insns


testCallback

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 17[flags]
;;  ref usage 	r0={5d,3u} r1={2d,1u} r2={1d} r6={1d,9u} r7={1d,7u} r17={3d,2u} r20={1d,1u} 
;;    total ref usage 37{14d,23u,0e} in 12{12 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 win32_timer.c:97 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 inc+0 S4 A32])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 6 5 7 2 win32_timer.c:97 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 11)
            (pc))) 464 {*jcc_1} (nil)
 -> 11)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 58

;; Pred edge  2 (fallthru)
(note 7 6 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 28 3 win32_timer.c:97 (set (reg:SI 0 ax [orig:58 iftmp.2 ] [58])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 inc+0 S4 A32])) 44 {*movsi_1} (nil))

(jump_insn 28 8 29 3 (set (pc)
        (label_ref 14)) 477 {jump} (nil)
 -> 14)
;; End of basic block 3 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58


;; Succ edge  5 [100.0%] 

(barrier 29 28 11)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 58

;; Pred edge  2
(code_label 11 29 12 4 13 "" [1 uses])

(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 4 win32_timer.c:97 (set (reg:SI 0 ax [orig:58 iftmp.2 ] [58])
        (const_int 1 [0x1])) 44 {*movsi_1} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58


;; Succ edge  5 (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
;; lr  def 	 17 [flags] 59 60 61

;; Pred edge  4 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 14 13 15 5 14 "" [1 uses])

(note 15 14 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 16 15 17 5 win32_timer.c:97 (set (reg:SI 1 dx [orig:59 counter.3 ] [59])
        (mem/v/c/i:SI (symbol_ref:SI ("counter") [flags 0x2]  <var_decl 0x7f373900 counter>) [0 counter+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 17 16 18 5 win32_timer.c:97 (parallel [
            (set (reg:SI 0 ax [orig:60 counter.4 ] [60])
                (plus:SI (reg:SI 0 ax [orig:58 iftmp.2 ] [58])
                    (reg:SI 1 dx [orig:59 counter.3 ] [59])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(insn 18 17 19 5 win32_timer.c:97 (set (mem/v/c/i:SI (symbol_ref:SI ("counter") [flags 0x2]  <var_decl 0x7f373900 counter>) [0 counter+0 S4 A32])
        (reg:SI 0 ax [orig:60 counter.4 ] [60])) 44 {*movsi_1} (nil))

(insn 19 18 20 5 win32_timer.c:99 (set (reg:SI 0 ax [orig:61 counter.5 ] [61])
        (mem/v/c/i:SI (symbol_ref:SI ("counter") [flags 0x2]  <var_decl 0x7f373900 counter>) [0 counter+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 20 19 21 5 win32_timer.c:99 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:61 counter.5 ] [61])
            (const_int 99 [0x63]))) 6 {*cmpsi_1} (nil))

(jump_insn 21 20 22 5 win32_timer.c:99 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref:SI 26)
            (pc))) 464 {*jcc_1} (nil)
 -> 26)
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  7

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  5 (fallthru)
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 26 6 win32_timer.c:100 (set (mem/v/c/i:SI (symbol_ref:SI ("exitFlag") [flags 0x2]  <var_decl 0x7f373a20 exitFlag>) [0 exitFlag+0 S4 A32])
        (const_int 1 [0x1])) 44 {*movsi_1} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  6 (fallthru)
;; Pred edge  5
(code_label 26 23 27 7 12 "" [1 uses])

(note 27 26 30 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 30 27 0 NOTE_INSN_DELETED)


;; Function main (main)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a5 (r62,l0) best AREG, cover GENERAL_REGS
    r61: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r61,l0) best AREG, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a3 (r58,l0) best AREG, cover GENERAL_REGS

  a0(r61,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a2(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r58,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:12
  a4(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r62,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 49(l0): point = 0
   Insn 46(l0): point = 2
   Insn 42(l0): point = 4
   Insn 41(l0): point = 6
   Insn 39(l0): point = 9
   Insn 38(l0): point = 11
   Insn 36(l0): point = 13
   Insn 33(l0): point = 16
   Insn 32(l0): point = 18
   Insn 54(l0): point = 21
   Insn 28(l0): point = 23
   Insn 25(l0): point = 26
   Insn 52(l0): point = 29
   Insn 20(l0): point = 31
   Insn 19(l0): point = 33
   Insn 18(l0): point = 35
   Insn 17(l0): point = 37
   Insn 16(l0): point = 39
   Insn 15(l0): point = 41
   Insn 14(l0): point = 43
   Insn 12(l0): point = 46
   Insn 11(l0): point = 48
   Insn 10(l0): point = 50
   Insn 9(l0): point = 52
   Insn 8(l0): point = 54
   Insn 7(l0): point = 56
   Insn 6(l0): point = 58
   Insn 3(l0): point = 60
 a0(r61): [3..4]
 a1(r60): [5..6]
 a2(r59): [12..13]
 a3(r58): [29..31] [24..26]
 a4(r63): [38..39]
 a5(r62): [51..52]
Compressing live ranges: from 63 to 14 - 22%
Ranges after the compression:
 a0(r61): [0..1]
 a1(r60): [2..3]
 a2(r59): [4..5]
 a3(r58): [8..9] [6..7]
 a4(r63): [10..11]
 a5(r62): [12..13]
  regions=2, blocks=9, points=14
    allocnos=6, copies=0, conflicts=0, ranges=7
Disposition:
    3:r58  l0     0    2:r59  l0     0    1:r60  l0     0    0:r61  l0     0
    5:r62  l0     0    4:r63  l0     0
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 0
insn=9, live_throughout: 7, dead_or_set: 0, 62
insn=10, live_throughout: 7, dead_or_set: 62
insn=11, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 
insn=14, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 
insn=16, live_throughout: 7, dead_or_set: 63
insn=17, live_throughout: 7, dead_or_set: 63
insn=18, live_throughout: 7, dead_or_set: 
insn=19, live_throughout: 7, dead_or_set: 0
insn=20, live_throughout: 7, dead_or_set: 0, 58
insn=52, live_throughout: 7, 58, dead_or_set: 
insn=23, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 58
insn=26, live_throughout: 7, 58, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 58
insn=54, live_throughout: 7, dead_or_set: 
insn=37, live_throughout: 7, dead_or_set: 
insn=32, live_throughout: 7, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 0
insn=34, live_throughout: 7, dead_or_set: 
insn=36, live_throughout: 7, dead_or_set: 59
insn=38, live_throughout: 7, dead_or_set: 59
insn=39, live_throughout: 7, dead_or_set: 
insn=41, live_throughout: 7, dead_or_set: 60
insn=42, live_throughout: 7, dead_or_set: 60, 61
insn=46, live_throughout: 7, dead_or_set: 0, 61
insn=49, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 25
changing reg in insn 20
changing reg in insn 28
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 46
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 17
deleting insn with uid = 9.
deleting insn with uid = 20.
deleting insn with uid = 42.
deleting insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 3.
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 33.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={9d,6u} r1={5d} r2={5d} r6={1d,8u} r7={1d,25u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={7d,2u} r18={4d} r19={4d} r20={1d,1u,1e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 240{197d,42u,1e} in 24{20 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 62

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)

(call_insn 3 2 6 2 win32_timer.c:106 (call (mem:QI (symbol_ref:SI ("__main") [flags 0x43]) [0 S1 A8])
        (const_int 0 [0x0])) 483 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 6 3 7 2 win32_timer.c:108 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [0 timer_id+0 S4 A32])
        (const_int 0 [0x0])) 44 {*movsi_1} (nil))

(insn 7 6 8 2 win32_timer.c:110 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1000 [0x3e8])) 44 {*movsi_1} (nil))

(call_insn 8 7 10 2 win32_timer.c:110 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SetSchedulerRes") [flags 0x3]  <function_decl 0x7f322980 SetSchedulerRes>) [0 S1 A8])
            (const_int 4 [0x4]))) 696 {*call_value_0} (nil)
    (nil))

(insn 10 8 11 2 win32_timer.c:110 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [0 status+0 S4 A32])
        (reg:SI 0 ax [62])) 44 {*movsi_1} (nil))

(insn 11 10 12 2 win32_timer.c:111 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [0 status+0 S4 A32])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 12 11 13 2 win32_timer.c:111 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 23)
            (pc))) 464 {*jcc_1} (nil)
 -> 23)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 58 63

;; Pred edge  2 (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 3 win32_timer.c:111 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 2 [0x2])) 44 {*movsi_1} (nil))

(insn 15 14 16 3 win32_timer.c:111 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (symbol_ref:SI ("testCallback") [flags 0x3]  <function_decl 0x7f322b80 testCallback>)) 44 {*movsi_1} (nil))

(insn 16 15 17 3 win32_timer.c:111 (parallel [
            (set (reg:SI 0 ax [63])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) 197 {*addsi_1} (nil))

(insn 17 16 18 3 win32_timer.c:111 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [63])) 44 {*movsi_1} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffff8]))
        (nil)))

(insn 18 17 19 3 win32_timer.c:111 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1000 [0x3e8])) 44 {*movsi_1} (nil))

(call_insn 19 18 52 3 win32_timer.c:111 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("installTimerFunc") [flags 0x3]  <function_decl 0x7f322a80 installTimerFunc>) [0 S1 A8])
            (const_int 16 [0x10]))) 696 {*call_value_0} (nil)
    (nil))

(jump_insn 52 19 53 3 (set (pc)
        (label_ref 26)) 477 {jump} (nil)
 -> 26)
;; End of basic block 3 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58


;; Succ edge  5 [100.0%] 

(barrier 53 52 23)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 58

;; Pred edge  2
(code_label 23 53 24 4 17 "" [1 uses])

(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 4 win32_timer.c:111 (set (reg:SI 0 ax [orig:58 iftmp.0 ] [58])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [0 status+0 S4 A32])) 44 {*movsi_1} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58


;; Succ edge  5 (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
;; lr  def 	

;; Pred edge  4 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 26 25 27 5 18 "" [1 uses])

(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 54 5 win32_timer.c:111 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [0 status+0 S4 A32])
        (reg:SI 0 ax [orig:58 iftmp.0 ] [58])) 44 {*movsi_1} (nil))

(jump_insn 54 28 55 5 win32_timer.c:113 (set (pc)
        (label_ref 34)) 477 {jump} (nil)
 -> 34)
;; End of basic block 5 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 [100.0%] 

(barrier 55 54 37)

;; Start of basic block ( 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []

;; Pred edge  7
(code_label 37 55 31 6 20 "" [1 uses])

(note 31 37 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 6 win32_timer.c:113 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) 44 {*movsi_1} (nil))

(call_insn 33 32 34 6 win32_timer.c:113 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("sleep") [flags 0x43]  <function_decl 0x7f322c80 sleep>) [0 S1 A8])
            (const_int 4 [0x4]))) 696 {*call_value_0} (nil)
    (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59

;; Pred edge  6 (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 34 33 35 7 19 "" [1 uses])

(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 36 35 38 7 win32_timer.c:113 (set (reg:SI 0 ax [orig:59 exitFlag.1 ] [59])
        (mem/v/c/i:SI (symbol_ref:SI ("exitFlag") [flags 0x2]  <var_decl 0x7f373a20 exitFlag>) [0 exitFlag+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 38 36 39 7 win32_timer.c:113 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:59 exitFlag.1 ] [59])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 39 38 40 7 win32_timer.c:113 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 464 {*jcc_1} (nil)
 -> 37)
;; End of basic block 7 -> ( 6 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6
;; Succ edge  8 (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 60 61

;; Pred edge  7 (fallthru)
(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 49 8 win32_timer.c:118 (set (reg:SI 0 ax [orig:60 D.35064 ] [60])
        (mem/c/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [0 status+0 S4 A32])) 44 {*movsi_1} (nil))

(insn 49 41 56 8 win32_timer.c:119 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 56 49 0 NOTE_INSN_DELETED)

